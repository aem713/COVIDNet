# -*- coding: utf-8 -*-
"""reorganize_extracted_data_api

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fzOVXngDvWuuTrkIyJI11qqvECcLgf6M
"""

import pandas as pd
import os
from google.colab import drive
import shutil
from sklearn.model_selection import train_test_split
from os import listdir
from os.path import isfile, join

def make_new_dir(new_path):
  if not os.path.exists(new_path):
      os.makedirs(new_path)
  else:
      shutil.rmtree(new_path)           
      os.makedirs(new_path)

def subfolder_extractor(source, target, operation, flag):
  """
    Performs extraction of subfolders within a specified parent folder.
    It can either simply remove the first layer of subfolders or can 
    do so in addition to renaming the files with the names of their respective
    parent folders.

    inputs:
        - source: the subfolder one is attempting to remove
        - target: the target folder to extract the desired files and/or
                  directories to
        - operation: move or copy the files
        - flag: 0 represents to simply remove the first layer of subfolders
                1 represents to remove the first layer of subfolders as well as
                  to rename the files to include the names of their parent
                  folders

    Returns: N/A
    """
  # Define root and target directories 
  root_src_dir = os.path.join('.', source)
  root_target_dir = os.path.join('.',target)

  # Walk across all files and directories in our root directory
  for src_dir, dirs, files in os.walk(root_src_dir):
    dst_dir = src_dir.replace(root_src_dir, root_target_dir)

    # Create the necessary destination directories to move the copies of the
    #   contents of the subfolders one is trying to remove.
    if not os.path.exists(dst_dir):
      os.mkdir(dst_dir)

    for file_ in files:
      # If flag == 1, then rename files and remove their parent folders
      if (flag):
        ending = os.path.basename(os.path.normpath(root_src_dir))
        os.replace(os.path.join(root_src_dir, file_), os.path.join(dst_dir, ending + '_' + file_))

      # If flag == 0, then simply remove the subfolders of the source directory
      #   and move the files contained in the subfolders to the src directory 
      else:  
        src_file = os.path.join(src_dir, file_)
        dst_file = os.path.join(dst_dir, file_)
        if os.path.exists(dst_file):
          os.remove(dst_file)

        # Either copy or move the remaining files in the original subfolders
        if operation is 'copy':
          shutil.copy(src_file, dst_dir)
        elif operation is 'move':
          shutil.move(src_file, dst_dir)

def cleaner(data_dir, new_path, flag):
  """
    Calls subfolder_extractor function and cleans up any remaining empty
    subfolders within the source folder given by data_dir

    inputs:
        - data_dir: the source folder one is attempting to clean
        - new_path: the new destination directory to move to
        - flag: 0 represents to simply remove the first layer of subfolders
                1 represents to remove the first layer of subfolders as well as
                  to rename the files to include the names of their parent
                  folders

    Returns: N/A
    """
  # List comprehension to compile all the directories within data_dir
  directories = [d for d in os.listdir(data_dir) 
                 if os.path.isdir(os.path.join(data_dir, d))]

  # Compile a list containing the full filepaths of the subdirectories of data_dir
  dir_paths = list()
  for i in directories:
    dir_paths.append(os.path.join(data_dir, i))
  
  if (flag):
    operation = 'move'
  else:
    operation = 'copy'

  # Call the subfolder_extractor function for all subfolders of data_dir
  for i in dir_paths:
    subfolder_extractor(i, new_path, operation, flag)

  # Remove all the original subfolders since we have moved their contents into
  #   the folder defined by data_dir
  if (flag):
    for i in directories:
      shutil.rmtree(os.path.join(new_path, i))

def org_into_sounds(data_dir, desired_directories):
  """
    Organizes the files in the source directory into their appropriate
      subdirectories within the source directory

    inputs:
        - data_dir: the source folder one is attempting to organize
        - desired_directories: a list of desired directories that the user
                               intends to sort all files in data_dir into

    Returns: N/A
    """
  # Creates directories in data_dir as listed in desired_directories
  for d in desired_directories:
    make_new_dir(os.path.join(data_dir, d))

  # Copies files from data_dir into their appropriate folders
  only_files = [f for f in listdir(data_dir) if isfile(join(data_dir, f))]
  for file_ in only_files:
    for i in desired_directories:
      if (i in file_):
        shutil.copy(file_, os.path.join(i, file_))
  
  # Removes all files from data_dir since all files have been copied into
  #   their appropriate folders

  all_files = []
  for (dirpath, dirnames, filenames) in os.walk(data_dir):
    all_files.extend(filenames)
    break
  for i in all_files:
    os.remove(i)