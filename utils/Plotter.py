# -*- coding: utf-8 -*-
"""Plotter

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wh1zQ6QC1VfRUD8G4TwKzyBQFe4nTbCk
"""

import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
from matplotlib import pyplot

def loss_plot(model, model_label, val=False):
  """
  Creates a plot of the loss function of the model
  inputs:
    - model: the model to plot
    - model_label: label of the model
  outputs: N/A
  """
  plt.plot(model.history['loss'], label='Loss (training data)')
  if val:
    plt.plot(model.history['val_loss'], label='Validation Loss')
  plt.title('Loss Function for' + model_label + 'Model')
  plt.ylabel('Loss Value')
  plt.xlabel('No. epoch')
  plt.legend(loc="upper left")
  plt.show()

def accuracy_plot(model,model_label, val=False):
  """
  Creates a plot of the accuracy function of the model
  inputs:
    - model: the model to plot
    - model_label: label of the model
  outputs: N/A
  """
  plt.plot(model.history['accuracy'], label='Accuracy (training data)')
  if val:
    plt.plot(model.history['val_accuracy'], label='Accuracy (Validation data)')
  plt.title('Accuracy for' + model_label + 'Model')
  plt.ylabel('Accuracy Value')
  plt.xlabel('No. epoch')
  plt.legend(loc="upper left")
  plt.show()
  plt.show()

def roc_plot(y_test, predict, model_label):
  """
  Creates a plot of the roc of the model
  inputs:
    - y_test: true binary labels
    - predict: target scores
    - model_label: label of the model
  outputs: N/A
  """
  # calculate roc curves
  ns_fpr, ns_tpr, _ = roc_curve(y_test, predict)
  # plot the roc curve for the model
  pyplot.plot(ns_fpr, ns_tpr, linestyle='--', label='ROC')
  pyplot.title('ROC curve for the' + model_label + 'Model')
  # axis labels
  pyplot.xlabel('False Positive Rate')
  pyplot.ylabel('True Positive Rate')
  # show the legend
  pyplot.legend()
  # show the plot
  pyplot.show()