# -*- coding: utf-8 -*-
"""CNN modeling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EiQPVG_71plSTuX4vWY3fo9YpqAtyNiN
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

def build_model(input_shape)
  input = layers.Input(shape=input_shape, batch_size=BATCH_SIZE)

  model = model.Sequential([ 
    # Model Here
  
  #1. Feature extraction and mapping: 2-3 pairs of convolution and pooling layer pairs: ex. do 2-3 of these

  #layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=input_shape)
  #layers.MaxPooling2D((2, 2))

  #2. NN:  
  #a. Dropout (set some random points in the feature map to 0. Increase this to help prevent over fitting if we have that issue): layers.Dropout(0.25),
  #b. Flatten (setup for NN, you gotta do this lol): layers.Flatten(),
  #c. Density connected NN layer. Use relu for your first one: layers.Dense( units , activation='relu')
  #d. Add more Density connected NN layers as you wish, ex: layers.Dense(units, activation='softmax')                     

  ])
  #3. Compile your thing: see https://www.tensorflow.org/tutorials/audio/simple_audio
  #4. Run model on Training data: 
  #model.fit(train_ds, validation_ds, epochs=10)
  #train_ds should be an array containing just the spectrograms. 
  #validation_ds should be a 1xN vector/array and each value should correspond to the status of simiarlly indexed spectrogram. EX. validation_ds = [1, 1, 0, 0] would mean the the 1st and 2nd spectrogram of train_ds are positive cases.


  outputs = keras.layers.Dense(2, activation="softmax")(x) # 2 classes, COVID, No COVID
  pass

#Example of a two layered 
model = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=input_shape),
    layers.MaxPooling2D((2, 2)),
    
    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

#Compile:
model.compile(
    optimizer=tf.keras.optimizers.Adam(),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['accuracy'],
)

#Run on training data
cnn.fit(train_ds, validation_ds, epochs=10)